from typing import Tuple
from sklearn.datasets import make_friedman1
import numpy as np

def generate_friedman1_dataset(
    n_samples: int = 1000,
    n_features: int = 10,
    n_noise_features: int = 990,
    noise: float = 1.0,
    random_state: int = 0
) -> Tuple[np.ndarray, np.ndarray]:
    """
    Generate a synthetic regression dataset based on the Friedman #1 function.

    Args:
        n_samples (int): Number of data points to generate.
        n_features (int): Total number of features passed (only the first 5 of these are informative).
        n_noise_features (int): Additional pure-noise features to append.
        noise (float): Standard deviation of the Gaussian noise Îµ.
        random_state (int): Seed for reproducibility.

    Returns:
        X (np.ndarray of shape (n_samples, n_features + n_noise_features)):
            Feature matrix consisting of `n_features` Friedman inputs
            plus `n_noise_features` uniform noise columns.
        y (np.ndarray of shape (n_samples,)):
            Target vector generated by the Friedman #1 formula.
    """
    # Base dataset: 10 features, first 5 informative, default Ïƒ=1 noise
    X, y = make_friedman1(
        n_samples=n_samples,
        n_features=n_features,
        noise=noise,
        random_state=random_state
    )

    # To stress-test at higher dims, append n noise features:
    X = np.hstack([X, np.random.rand(X.shape[0], n_noise_features)])
    
    return X, y

